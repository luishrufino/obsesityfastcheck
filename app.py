import streamlit as st
import pandas as pd
import joblib  # Usando joblib para mais robustez
from utils import (
    FeatureEngineering, TrasformNumeric, MinMaxScalerFeatures, 
    LifestyleScore, ObesityMap, Model, DropNonNumeric, DropFeatures
)
import google.generativeai as genai


# 2. CONFIGURA√á√ÉO DA P√ÅGINA (PRIMEIRO COMANDO STREAMLIT)
st.set_page_config(page_title="ObesityFastCheck", layout="centered")

# 3. FUN√á√ïES AUXILIARES
@st.cache_resource
def load_model():
    """Carrega o pipeline do arquivo uma √∫nica vez."""
    try:
        # Lembre-se de ajustar o caminho se 'app.py' estiver em uma subpasta
        pipeline = joblib.load('streamlit_cloud/obesity_model.joblib')
        return pipeline
    except FileNotFoundError:
        st.error("Arquivo do modelo 'obesity_model.joblib' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar o modelo: {e}")
        return None



def gerar_analise_ia(imc, lifestyle_score, healthy_meal_ratio, activity_balance, transport_type, input_data):
    """
    Gera uma an√°lise de sa√∫de personalizada usando a API do Google Gemini.
    """
    # Configura a API key a partir dos segredos do Streamlit
    try:
        genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    except Exception:
        st.error("Chave da API do Google n√£o encontrada. Verifique o arquivo secrets.toml.")
        return "Erro: Chave da API n√£o configurada."

    # Cria o modelo
    model = genai.GenerativeModel('gemini-2.5-flash') # Usando o modelo Flash, que √© r√°pido e eficiente

    # O prompt √© a parte mais importante. Ele guia a IA para dar a resposta desejada.
    prompt = f"""
    Voc√™ √© um assistente de sa√∫de virtual do aplicativo ObesityFastCheck. Sua miss√£o √© fornecer uma an√°lise pr√©via, educativa e motivacional com base nos dados do usu√°rio, de forma emp√°tica e positiva.

    **Dados do Usu√°rio:**
    - **IMC (√çndice de Massa Corporal):** {imc:.2f}
    - **LifestyleScore (Pontua√ß√£o de Estilo de Vida):** {lifestyle_score}
    - **HealthyMealRatio (Propor√ß√£o de Refei√ß√£o Saud√°vel):** {healthy_meal_ratio:.2f}
    - **ActivityBalance (Balan√ßo de Atividade F√≠sica vs. Tela):** {activity_balance}
    - **TransportType (Tipo de Transporte):** '{transport_type}'

    - ** Inputa do usu√°rio: para avalia√ß√µes mais precisas**
    - **Geral:** {input_data}

    **Instru√ß√µes:**
    -   IMC (√çndice de Massa Corporal)
        F√≥rmula: peso / altura¬≤
        Bom: Entre 18.5 e 24.9 ‚Üí Indica peso adequado em rela√ß√£o √† altura.
        Ruim:Abaixo de 18.5 ‚Üí Pode indicar desnutri√ß√£o ou alimenta√ß√£o insuficiente. Acima de 25 ‚Üí Pode indicar sobrepeso ou obesidade, aumentando risco de doen√ßas cr√¥nicas.

    -   LifestyleScore (Pontua√ß√£o de Estilo de Vida)
        Pontua√ß√£o de zero a quatro, baseada em quatro h√°bitos saud√°veis:
            N√£o fumar
            Controlar calorias
            Evitar alimentos muito cal√≥ricos
            N√£o ter hist√≥rico familiar de sobrepeso

        Score 4: Excelente ‚Üí Estilo de vida muito saud√°vel, com baixo risco metab√≥lico.
        Score 2 ou 3: Regular ‚Üí H√° bons h√°bitos.
        Score 0 ou 1: Ruim ‚Üí Estilo de vida de risco, associado a maus h√°bitos alimentares e comportamentos sedent√°rios.

    -   HealthyMealRatio (Propor√ß√£o de Refei√ß√£o Saud√°vel)
        F√≥rmula: consumo de vegetais / n√∫mero de refei√ß√µes        
        Bom: Acima de 0.5 ‚Üí Indica que mais da metade das refei√ß√µes incluem vegetais.
        Ruim: Abaixo de 0.3 ‚Üí Pouca ingest√£o de vegetais, alimenta√ß√£o pobre em fibras e micronutrientes.

        Exemplo:
            FCVC = 3 e NCP = 3 ‚Üí Ratio = 1 ‚Üí Muito bom!
            FCVC = 1 e NCP = 4 ‚Üí Ratio = 0.25 ‚Üí Precisa melhorar!

    -   ActivityBalance (Balan√ßo de Atividade F√≠sica vs. Tempo em Tela)
        F√≥rmula: FAF - TUE
        Bom: Acima de 1 ‚Üí Atividade f√≠sica supera o tempo em frente a telas.
        Neutro: Pr√≥ximo de zero ‚Üí Equil√≠brio entre movimento e sedentarismo.
        Ruim: Negativo (ex: -1, -2) ‚Üí Muito tempo parado, comportamento sedent√°rio.

        Exemplo:
            FAF = 3, TUE = 1 ‚Üí Balance = 2 ‚Üí Excelente!
            FAF = 1, TUE = 2 ‚Üí Balance = -1 ‚Üí Precisa se movimentar mais!

    -   TransportType (Tipo de Transporte)
        Classifica√ß√£o de acordo com o n√≠vel de atividade f√≠sica envolvido:
            active: Caminhada, Bicicleta ‚Üí Excelente para manter rotina ativa.
            neutral: Transporte P√∫blico ‚Üí Moderado, geralmente envolve caminhada parcial.
            sedentary: Autom√≥vel, Motocicleta ‚Üí Pouca ou nenhuma atividade f√≠sica envolvida.


    **Sua Tarefa:**
    Com base nos dados acima, gere uma an√°lise curta e coesa sobre o perfil de sa√∫de do usu√°rio. Combine as informa√ß√µes para dar uma vis√£o hol√≠stica. Por exemplo, se o IMC for alto, mas o LifestyleScore for bom, reconhe√ßa o esfor√ßo e sugira os pr√≥ximos passos.

    **Regras Obrigat√≥rias:**
    1.  **NUNCA forne√ßa um diagn√≥stico m√©dico formal.** Use termos como "sugere", "indica", "parece que".
    2.  **SEMPRE reforce que a ferramenta √© apenas educativa** e que a consulta com um profissional de sa√∫de (m√©dico, nutricionista) √© indispens√°vel para um diagn√≥stico e plano de tratamento real.
    3.  **Use uma linguagem t√©cnica, mas acess√≠vel.** Evite jarg√µes m√©dicos complexos e explique termos quando necess√°rio. E n√£o use nada motivacional ou de autoajuda, apenas an√°lise.
    4.  **Formate a resposta para ser exibida no Streamlit.** Use negrito (`**`) para destacar os pontos mais importantes.
    5.  **Separe a an√°lise de cada indicador por t√≥pico. Deve ter 5 t√≥picos, 1 para cada indicador**
    6.  **Crie uma conclus√£o breve que resuma os pontos principais e incentive o usu√°rio a buscar mais informa√ß√µes ou ajuda profissional.**
    7.  **Conside que o usu√°rio est√° fazendo uma an√°lise pr√©via, o objetivo da predi√ß√£o √© auxiliar a tomada de decis√£o da equipe m√©dica a diagnosticar a obesidade.**

        
    """

    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Ocorreu um erro ao contatar a IA: {e}")
        return "N√£o foi poss√≠vel gerar a an√°lise no momento."
    

# 4. CARREGAMENTO DO MODELO
pipeline = load_model()

# 5. INTERFACE DO USU√ÅRIO
st.title("üî¨ ObesityFastCheck")
st.write("Insira suas informa√ß√µes para prever seu n√≠vel de obesidade com base em caracter√≠sticas alimentares e f√≠sicas:")

# Dicion√°rios de mapeamento
yes_no_map = {'Sim': 'yes', 'N√£o': 'no'}
caec_map = {'N√£o': 'no', '√Äs vezes': 'Sometimes', 'Frequentemente': 'Frequently', 'Sempre': 'Always'}
calc_map = caec_map.copy()
gender_map = {'Masculino': 'Male', 'Feminino': 'Female'}
mtrans_map = {
    'Transporte P√∫blico': 'Public_Transportation',
    'Caminhada': 'Walking',
    'Motocicleta': 'Motorbike',
    'Bicicleta': 'Bike',
    'Autom√≥vel': 'Automobile'
}

# Entradas num√©ricas
Height = st.number_input("Altura (em metros)", min_value=1.0, max_value=2.5, value=1.85, format="%.2f")
Weight = st.number_input("Peso (em kg)", min_value=30.0, max_value=200.0, value=86.0, format="%.2f")
Gender_pt = st.radio("G√™nero", list(gender_map.keys()), horizontal=True)

FCVC = st.slider("Frequ√™ncia de consumo de vegetais (FCVC: 1 n√£o consome, 2 uma ou duas vezes, 3 tr√™s vezes ou mais)", 1, 3, 1, step=1)
NCP = st.slider("N√∫mero de refei√ß√µes principais por dia (NCP)", 1, 4, 3, step=1)
CH2O = st.slider("Consumo de √°gua em litros por dia (CH2O)", 0, 3, 2, step=1)
FAF = st.slider("Atividade f√≠sica semanal (FAF: 0 n√£o pr√°tica, 1 uma vez por semana, 2 de duas a tr√™s vezes por semana, 3 mais de 3 vezes)", 0, 3, 3, step=1)
TUE = st.slider("Tempo de uso de dispositivos eletr√¥nicos por dia (TUE: 0 pouco uso, 1 uso moderado, 2 muito uso)", 0, 2, 1, step=1)

# Entradas categ√≥ricas traduzidas
family_history_pt = st.radio("Hist√≥rico familiar de sobrepeso?", list(yes_no_map.keys()), horizontal=True)
FAVC_pt = st.radio("Consome alimentos cal√≥ricos frequentemente?", list(yes_no_map.keys()), horizontal=True)
SMOKE_pt = st.radio("Voc√™ fuma?", list(yes_no_map.keys()), horizontal=True)
SCC_pt = st.radio("Voc√™ monitora seu consumo cal√≥rico?", list(yes_no_map.keys()), horizontal=True)
CAEC_pt = st.selectbox("Consumo entre refei√ß√µes (CAEC: lanches)", list(caec_map.keys()))
CALC_pt = st.selectbox("Consumo de bebidas alco√≥licas (CALC)", list(calc_map.keys()))
MTRANS_pt = st.selectbox("Transporte mais usado", list(mtrans_map.keys()))


with st.sidebar:
    st.markdown("""
    <h3 style='font-size: 20px;'>‚ÑπÔ∏è <strong>Sobre o ObesityFastCheck</strong></h3>

    O <strong>ObesityFastCheck</strong> √© uma aplica√ß√£o interativa que prev√™ o n√≠vel de obesidade com base em h√°bitos alimentares, rotina f√≠sica e perfil de sa√∫de.  
    A an√°lise utiliza vari√°veis originais e tamb√©m vari√°veis derivadas, que enriquecem a interpreta√ß√£o e aumentam a precis√£o do modelo.

    <br><strong>üìå Vari√°veis derivadas explicadas:</strong><br>

    <strong>IMC</strong> = peso / altura¬≤  
    Indicador cl√°ssico usado mundialmente para classificar o n√≠vel de obesidade.

    <br><strong>HealthyMealRatio</strong> = consumo de vegetais / n√∫mero de refei√ß√µes  
    Mede o equil√≠brio alimentar, avaliando se h√° propor√ß√£o adequada de vegetais nas refei√ß√µes.

    <br><strong>ActivityBalance</strong> = atividade f√≠sica - tempo em frente a telas  
    Representa o saldo entre movimenta√ß√£o ativa e comportamento sedent√°rio.

    <br><strong>TransportType</strong> = tipo de transporte usado  
    Classifica√ß√£o:
    <ul>
        <li><strong>sedentary</strong>: Autom√≥vel, Motocicleta</li>
        <li><strong>active</strong>: Bicicleta, Caminhada</li>
        <li><strong>neutral</strong>: Transporte p√∫blico</li>
    </ul>

    <br><strong>LifestyleScore</strong> = escore de h√°bitos saud√°veis  
    Pontua com base em:
    <ul>
        <li>N√£o fumar</li>
        <li>Controlar calorias (SCC)</li>
        <li>Evitar alimentos muito cal√≥ricos (FAVC)</li>
        <li>Aus√™ncia de hist√≥rico familiar de sobrepeso</li>
    </ul>
    Quanto maior, melhor o estilo de vida.

    <hr style="margin-top: 20px; margin-bottom: 10px;">
    <div style="color: red; font-size: 14px;">
        ‚ö†Ô∏è Esta ferramenta √© apenas educativa e informativa.  
        <strong>N√£o substitui avalia√ß√£o ou diagn√≥stico m√©dico profissional.</strong>
    </div>
    <hr>
    """, unsafe_allow_html=True)

    with st.expander("üë§ Sobre o Autor"):
        st.write("""
        **Luis Rufino**  
        *https://github.com/luishrufino*
        """)


# 6. L√ìGICA DO BOT√ÉO
if st.button("Prever N√≠vel de Obesidade"):
    if pipeline is not None:
        input_data = {
            "Height": Height, "Weight": Weight, "FCVC": FCVC, "NCP": NCP,
            "CH2O": CH2O, "FAF": FAF, "TUE": TUE,
            "family_history": yes_no_map[family_history_pt],
            "FAVC": yes_no_map[FAVC_pt], "SMOKE": yes_no_map[SMOKE_pt],
            "SCC": yes_no_map[SCC_pt], "CAEC": caec_map[CAEC_pt],
            "CALC": calc_map[CALC_pt], "Gender": gender_map[Gender_pt],
            "MTRANS": mtrans_map[MTRANS_pt]
        }
        features_df = pd.DataFrame([input_data])

        try:
            transformed_df = pipeline[:-1].transform(features_df)
            prediction = pipeline.predict(features_df)
            # st.write("üîé Dados enviados para a API:")
            # st.json(input_data)

            
            
            
            
            predicted_class = prediction[0] 
            

    
            imc = transformed_df['IMC'].iloc[0]
            lifestyle_score = transformed_df['LifestyleScore'].iloc[0]
            healthy_meal_ratio = transformed_df['HealthyMealRatio'].iloc[0]
            activity_balance = transformed_df['ActivityBalance'].iloc[0]
            transport_type = transformed_df['TransportType'].iloc[0]

            label_map = {
                0: 'Peso Insuficiente', 1: 'Peso Normal', 2: 'Sobrepeso N√≠vel I',
                3: 'Sobrepeso N√≠vel II', 4: 'Obesidade Tipo I', 5: 'Obesidade Tipo II',
                6: 'Obesidade Tipo III'
            }

            

            st.markdown("---")

            st.markdown(
                f"""
                <div style='background:rgba(200,200,200,0.5); padding:18px; border-radius:12px; margin-bottom:10px;'>
                    <span style='font-size:28px; color:#222; font-weight:bold;'>
                        Previs√£o: <strong>{label_map.get(predicted_class, 'N/A')}</strong>
                    </span>
                </div>
                """,
                unsafe_allow_html=True
            )

        
            st.subheader("ü§ñ An√°lise Personalizada por IA")
            
            # Adiciona um spinner para mostrar que est√° processando
            with st.spinner('Gerando an√°lise com base nos seus dados...'):
                analise_personalizada = gerar_analise_ia(
                    imc=imc,
                    lifestyle_score=lifestyle_score,
                    healthy_meal_ratio=healthy_meal_ratio,
                    activity_balance=activity_balance,
                    transport_type=transport_type,
                    input_data=input_data
                )
            st.markdown(analise_personalizada)
            st.markdown("---")
                    
        except Exception as e:
                st.error(f"Ocorreu um erro durante a an√°lise: {e}")
                st.error("Verifique se todos os campos foram preenchidos corretamente.")
        pass 
else:
        st.error("O modelo n√£o est√° carregado. O aplicativo n√£o pode fazer predi√ß√µes.")